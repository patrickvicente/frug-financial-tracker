{"ast":null,"code":"export function formatCurrency(amount) {\n  return new Intl.NumberFormat('en-au', {\n    style: \"currency\",\n    currency: \"AUD\",\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(amount);\n}\nexport function getThisMonth() {\n  const date = new Date();\n  return date.toISOString().split('T')[0].slice(0, 7);\n}\n;\nexport function getNextMonth(dateString) {\n  const date = new Date(dateString);\n  date.setMonth(date.getMonth() + 1);\n  return date.toISOString().split('T')[0].slice(0, 7);\n}\nexport function getPreviousMonth(dateString) {\n  const date = new Date(dateString);\n  date.setMonth(date.getMonth() - 1);\n  return date.toISOString().split('T')[0].slice(0, 7);\n}\nexport function formatMonthYear(dateString) {\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const [year, month] = dateString.split(\"-\");\n  return `${months[parseInt(month, 10) - 1]} ${year}`;\n}\n\n// Utility function to convert \"September 2024\" to \"2024-09 format\"\nexport function convertToYearMonth(dateString) {\n  const date = new Date(DateString + \"01\"); // add a day to make it a full day\n  const year = date.getFullYear();\n  const month = (\"0\" + (date.getMonth() + 1)).slice(-2); // Ensures two digits\n  return `${year}-${month}`;\n}\n;","map":{"version":3,"names":["formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","getThisMonth","date","Date","toISOString","split","slice","getNextMonth","dateString","setMonth","getMonth","getPreviousMonth","formatMonthYear","months","year","month","parseInt","convertToYearMonth","DateString","getFullYear"],"sources":["/Users/patrickvicente/Documents/projects/frug-financial-tracker/src/utils/utils.js"],"sourcesContent":["export function formatCurrency(amount) {\n    return new Intl.NumberFormat('en-au', {\n        style: \"currency\",\n        currency: \"AUD\",\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2,\n    }).format(amount);\n}\n\nexport function getThisMonth() {\n    const date = new Date();\n    return date.toISOString().split('T')[0].slice(0, 7);\n};\n\nexport function getNextMonth(dateString) {\n    const date = new Date(dateString);\n    date.setMonth(date.getMonth() + 1)\n    return date.toISOString().split('T')[0].slice(0, 7);\n}\n\nexport function getPreviousMonth(dateString) {\n    const date = new Date(dateString);\n    date.setMonth(date.getMonth() - 1)\n    return date.toISOString().split('T')[0].slice(0, 7);\n}\n\nexport function formatMonthYear(dateString) {\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    const [year, month] = dateString.split(\"-\");\n    return `${months[parseInt(month, 10) - 1]} ${year}`;\n}\n\n// Utility function to convert \"September 2024\" to \"2024-09 format\"\nexport function convertToYearMonth (dateString) {\n    const date = new Date(DateString + \"01\") // add a day to make it a full day\n    const year = date.getFullYear();\n    const month = (\"0\" + (date.getMonth() + 1)).slice(-2); // Ensures two digits\n    return `${year}-${month}`;\n};"],"mappings":"AAAA,OAAO,SAASA,cAAcA,CAACC,MAAM,EAAE;EACnC,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;IAClCC,KAAK,EAAE,UAAU;IACjBC,QAAQ,EAAE,KAAK;IACfC,qBAAqB,EAAE,CAAC;IACxBC,qBAAqB,EAAE;EAC3B,CAAC,CAAC,CAACC,MAAM,CAACP,MAAM,CAAC;AACrB;AAEA,OAAO,SAASQ,YAAYA,CAAA,EAAG;EAC3B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;EACvB,OAAOD,IAAI,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;AACvD;AAAC;AAED,OAAO,SAASC,YAAYA,CAACC,UAAU,EAAE;EACrC,MAAMN,IAAI,GAAG,IAAIC,IAAI,CAACK,UAAU,CAAC;EACjCN,IAAI,CAACO,QAAQ,CAACP,IAAI,CAACQ,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAClC,OAAOR,IAAI,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;AACvD;AAEA,OAAO,SAASK,gBAAgBA,CAACH,UAAU,EAAE;EACzC,MAAMN,IAAI,GAAG,IAAIC,IAAI,CAACK,UAAU,CAAC;EACjCN,IAAI,CAACO,QAAQ,CAACP,IAAI,CAACQ,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAClC,OAAOR,IAAI,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;AACvD;AAEA,OAAO,SAASM,eAAeA,CAACJ,UAAU,EAAE;EACxC,MAAMK,MAAM,GAAG,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC;EACzI,MAAM,CAACC,IAAI,EAAEC,KAAK,CAAC,GAAGP,UAAU,CAACH,KAAK,CAAC,GAAG,CAAC;EAC3C,OAAO,GAAGQ,MAAM,CAACG,QAAQ,CAACD,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,IAAID,IAAI,EAAE;AACvD;;AAEA;AACA,OAAO,SAASG,kBAAkBA,CAAET,UAAU,EAAE;EAC5C,MAAMN,IAAI,GAAG,IAAIC,IAAI,CAACe,UAAU,GAAG,IAAI,CAAC,EAAC;EACzC,MAAMJ,IAAI,GAAGZ,IAAI,CAACiB,WAAW,CAAC,CAAC;EAC/B,MAAMJ,KAAK,GAAG,CAAC,GAAG,IAAIb,IAAI,CAACQ,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,EAAEJ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACvD,OAAO,GAAGQ,IAAI,IAAIC,KAAK,EAAE;AAC7B;AAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}