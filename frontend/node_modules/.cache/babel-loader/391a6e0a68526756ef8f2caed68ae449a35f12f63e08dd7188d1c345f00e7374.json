{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  byCategory: {\n    clothing: {\n      category: \"clothing\",\n      type: \"expense\",\n      budget: 1000,\n      totalSpent: 1500,\n      transactionIds: []\n    }\n  },\n  byMonth: {\n    \"2024-08\": {\n      totalBudget: 5000,\n      // Total budget for the month\n      totalSpent: 1500,\n      // Total spent across all categories for the month\n      remaining: 3500,\n      // Remaining budget for the month\n      categories: {\n        clothing: {\n          type: \"expense\",\n          // Could be 'expense' or 'income'\n          budget: 1000,\n          // Budget allocated for this category\n          totalSpent: 500,\n          // Total spent in this category\n          remaining: 500,\n          // Remaining budget for this category\n          transactionIds: []\n        },\n        groceries: {\n          type: \"expense\",\n          budget: 1500,\n          totalSpent: 1000,\n          remaining: 500,\n          transactionIds: []\n        }\n      }\n    }\n  }\n};\nconst budgetsSlice = createSlice({\n  name: \"budgets\",\n  initialState,\n  reducers: {\n    addBudget: (state, action) => {\n      const {\n        monthYear,\n        category,\n        budget,\n        type\n      } = action.payload;\n      if (!state.byCategory[category] && budget >= 0) {\n        state.byCategory[category] = {\n          category,\n          type,\n          budget: 0,\n          totalSpent: 0,\n          transactionIds: []\n        };\n      }\n\n      // Ensure the monthYear exists in the byMonth\n      if (!state.byMonth[monthYear]) {\n        state.byMonth[monthYear] = {\n          totalBudget: 0,\n          totalSpent: 0,\n          remaining: 0,\n          categories: {}\n        };\n      }\n      if (!state.byMonth[monthYear].categories[category]) {\n        state.byMonth[monthYear].categories[category] = {\n          type,\n          budget,\n          totalSpent: 0,\n          transactionIds: []\n        };\n        if (type === \"income\") {\n          state.byMonth[monthYear].remaining += budget; // Adds income to remaining amount\n        } else {\n          state.byMonth[monthYear].totalBudget += budget; // add the budget to totalBudget\n          state.byMonth[monthYear].remaining -= budget; // updates the remaining amount\n        }\n      }\n    },\n    editBudget: (state, action) => {\n      const {\n        category,\n        budget\n      } = action.payload;\n      if (state.byCategory[category]) {\n        state.byCategory[category].budget = budget;\n      }\n\n      // TO DO Implement Change name of category\n    },\n    addBudgetTransaction: (state, action) => {\n      const {\n        category,\n        amount,\n        date,\n        type\n      } = action.payload;\n      date = new Date(date);\n      const year = date.getFullYear();\n      const month = (\"0\" + (date.getMonth() + 1)).slice(-2); // Ensures two digits\n      const yearMonth = `${year}-${month}`;\n      if (!state.byMonth[yearMonth]) {\n        // Creates an object if new month\n        state.byMonth[yearMonth] = {\n          categories: {}\n        };\n      }\n      if (!state.byMonth[yearMonth].categories[category]) {\n        // Creates a category object if new object\n        state.byMonth[yearMonth].categories[category] = {\n          type,\n          budget: 0,\n          totalSpent: 0,\n          transactionIds: []\n        };\n      }\n      // Ensure the category is initialized in byCategory\n      if (!state.byCategory[category]) {\n        state.byCategory[category] = {\n          type,\n          category,\n          budget: 0,\n          totalSpent: 0,\n          transactionIds: []\n        };\n      }\n\n      // Update transactions and totals\n      state.byCategory[category].transactionIds.push(action.payload.id);\n      state.byCategory[category].totalSpent += amount;\n      state.byMonth[month].categories[category].transactionIds.push(action.payload.id);\n      state.byMonth[yearMonth].categories[category].totalSpent += amount;\n    }\n  }\n});\nexport const {\n  addBudget,\n  editBudget,\n  addBudgetTransaction\n} = budgetsSlice.actions;\nexport default budgetsSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","byCategory","clothing","category","type","budget","totalSpent","transactionIds","byMonth","totalBudget","remaining","categories","groceries","budgetsSlice","name","reducers","addBudget","state","action","monthYear","payload","editBudget","addBudgetTransaction","amount","date","Date","year","getFullYear","month","getMonth","slice","yearMonth","push","id","actions","reducer"],"sources":["/Users/patrickvicente/Documents/projects/frug-financial-tracker/src/redux/slices/budgetsSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    byCategory: {\n        clothing: {\n            category: \"clothing\",\n            type: \"expense\",\n            budget: 1000,\n            totalSpent: 1500,\n            transactionIds: [],\n        }\n    },\n    byMonth: {\n        \"2024-08\": {\n            totalBudget: 5000, // Total budget for the month\n            totalSpent: 1500, // Total spent across all categories for the month\n            remaining: 3500, // Remaining budget for the month\n            categories: {\n                clothing: {\n                    type: \"expense\", // Could be 'expense' or 'income'\n                    budget: 1000, // Budget allocated for this category\n                    totalSpent: 500, // Total spent in this category\n                    remaining: 500, // Remaining budget for this category\n                    transactionIds: [],\n                },\n                groceries: {\n                    type: \"expense\",\n                    budget: 1500,\n                    totalSpent: 1000,\n                    remaining: 500,\n                    transactionIds: [],\n                },\n            },\n        },\n    },\n};\n\nconst budgetsSlice = createSlice({\n    name: \"budgets\",\n    initialState,\n    reducers: {\n        addBudget: (state, action) => {\n            const { monthYear, category, budget, type } = action.payload;\n\n            if (!state.byCategory[category] && budget >= 0) {\n                state.byCategory[category] = {\n                    category,\n                    type,\n                    budget: 0,\n                    totalSpent: 0,\n                    transactionIds: []\n                };\n            }\n\n            // Ensure the monthYear exists in the byMonth\n            if (!state.byMonth[monthYear]) {\n                state.byMonth[monthYear] = {\n                    totalBudget: 0,\n                    totalSpent: 0,\n                    remaining: 0,\n                    categories: {}\n                };\n            }\n\n            if (!state.byMonth[monthYear].categories[category]) {\n                state.byMonth[monthYear].categories[category] = { type, budget, totalSpent: 0, transactionIds: []};\n                \n                if (type === \"income\") {\n                    state.byMonth[monthYear].remaining += budget; // Adds income to remaining amount\n                } else {\n                    state.byMonth[monthYear].totalBudget += budget; // add the budget to totalBudget\n                    state.byMonth[monthYear].remaining -= budget; // updates the remaining amount\n                }\n            }\n\n        },\n        editBudget: (state, action) => {\n            const { category, budget } = action.payload;\n            if (state.byCategory[category]) {\n                state.byCategory[category].budget = budget;    \n            }\n            \n            // TO DO Implement Change name of category\n        },\n        addBudgetTransaction: (state, action) => {\n            const { category, amount, date, type } = action.payload;\n            date = new Date(date);\n            const year = date.getFullYear();\n            const month = (\"0\" + (date.getMonth() + 1)).slice(-2); // Ensures two digits\n            const yearMonth = `${year}-${month}`;\n\n\n            if (!state.byMonth[yearMonth]) {\n                // Creates an object if new month\n                state.byMonth[yearMonth] = { categories: {}}\n            }\n\n            if (!state.byMonth[yearMonth].categories[category]) {\n                // Creates a category object if new object\n                state.byMonth[yearMonth].categories[category] = {type,  budget: 0, totalSpent: 0, transactionIds: [] };\n            }\n            // Ensure the category is initialized in byCategory\n            if (!state.byCategory[category]) {\n                state.byCategory[category] = { type, category, budget: 0, totalSpent: 0, transactionIds: [] };\n            }\n\n            // Update transactions and totals\n            state.byCategory[category].transactionIds.push(action.payload.id);\n            state.byCategory[category].totalSpent += amount;\n\n            state.byMonth[month].categories[category].transactionIds.push(action.payload.id);\n            state.byMonth[yearMonth].categories[category].totalSpent += amount;\n        },\n    }\n});\n\nexport const { addBudget, editBudget, addBudgetTransaction } = budgetsSlice.actions;\nexport default budgetsSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}