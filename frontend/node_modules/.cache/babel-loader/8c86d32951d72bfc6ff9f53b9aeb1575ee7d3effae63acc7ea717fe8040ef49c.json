{"ast":null,"code":"var _jsxFileName = \"/Users/patrickvicente/Documents/projects/frug-financial-tracker/src/components/Excel/ExcelUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport { useDispatch } from \"react-redux\";\nimport { addTransaction } from \"../../redux/slices/transactionsSlice\";\nimport { addBudget, addBudgetTransaction } from \"../../redux/slices/budgetsSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExcelUpload = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const dispatch = useDispatch();\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    setFile(file);\n    const reader = new FileReader();\n    reader.onload = event => {\n      const data = new Uint8Array(event.target.result);\n      const workbook = XLSX.read(data, {\n        type: \"array\"\n      });\n\n      // Read Transactions Sheet\n      const transactionsSheet = workbook.Sheets[workbook.SheetNames[0]];\n      const transactionsData = XLSX.utils.sheet_to_json(transactionsSheet);\n      transactionsData.forEach((row, index) => {\n        const transaction = {\n          id: index + 1,\n          type: row.Type,\n          description: row.Description,\n          date: row.Date,\n          amount: parseFloat(row.Amount),\n          category: row.Category\n        };\n        dispatch(addTransaction(transaction));\n        dispatch(addBudgetTransaction(transaction));\n        console.log(\"excel\", transaction);\n      });\n\n      // Read Budgets Sheet\n      const budgetsSheet = workbook.Sheets[workbook.SheetNames[1]];\n      const budgetsData = XLSX.utils.sheet_to_json(budgetsSheet);\n      budgetsData.forEach(row => {\n        const budget = {\n          monthYear: row.MonthYear,\n          category: row.Category,\n          budget: parseFloat(row.Budget),\n          type: row.Type\n        };\n        dispatch(addBudget(budget));\n      });\n    };\n    reader.readAsArrayBuffer(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(ExcelUpload, \"b51JiNiem4pzzK8vsAFrsSKTsC0=\", false, function () {\n  return [useDispatch];\n});\n_c = ExcelUpload;\nexport default ExcelUpload;\nvar _c;\n$RefreshReg$(_c, \"ExcelUpload\");","map":{"version":3,"names":["React","useState","XLSX","useDispatch","addTransaction","addBudget","addBudgetTransaction","jsxDEV","_jsxDEV","ExcelUpload","_s","file","setFile","dispatch","handleFileUpload","e","target","files","reader","FileReader","onload","event","data","Uint8Array","result","workbook","read","type","transactionsSheet","Sheets","SheetNames","transactionsData","utils","sheet_to_json","forEach","row","index","transaction","id","Type","description","Description","date","Date","amount","parseFloat","Amount","category","Category","console","log","budgetsSheet","budgetsData","budget","monthYear","MonthYear","Budget","readAsArrayBuffer","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/patrickvicente/Documents/projects/frug-financial-tracker/src/components/Excel/ExcelUpload.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport { useDispatch } from \"react-redux\";\nimport { addTransaction } from \"../../redux/slices/transactionsSlice\";\nimport { addBudget, addBudgetTransaction } from \"../../redux/slices/budgetsSlice\";\n\nconst ExcelUpload = () => {\n    const [file, setFile] = useState(null);\n    const dispatch = useDispatch();\n\n    const handleFileUpload = (e) => {\n        const file = e.target.files[0];\n        setFile(file);\n\n        const reader = new FileReader();\n        reader.onload = (event) => {\n            const data = new Uint8Array(event.target.result);\n            const workbook = XLSX.read(data, { type: \"array\" });\n\n            // Read Transactions Sheet\n            const transactionsSheet = workbook.Sheets[workbook.SheetNames[0]];\n            const transactionsData = XLSX.utils.sheet_to_json(transactionsSheet);\n\n            transactionsData.forEach((row, index) => {\n        \n                const transaction = {\n                    id: index + 1,\n                    type: row.Type,\n                    description: row.Description,\n                    date: row.Date,\n                    amount: parseFloat(row.Amount),\n                    category: row.Category,\n                };\n                dispatch(addTransaction(transaction));\n                dispatch(addBudgetTransaction(transaction))\n                console.log(\"excel\", transaction)\n            });\n\n            // Read Budgets Sheet\n            const budgetsSheet = workbook.Sheets[workbook.SheetNames[1]];\n            const budgetsData = XLSX.utils.sheet_to_json(budgetsSheet);\n\n            budgetsData.forEach((row) => {\n                const budget = {\n                    monthYear: row.MonthYear,\n                    category: row.Category,\n                    budget: parseFloat(row.Budget),\n                    type: row.Type,\n                };\n                dispatch(addBudget(budget));\n            });\n        };\n\n        reader.readAsArrayBuffer(file);\n    };\n\n    return (\n        <div>\n            <input type=\"file\" onChange={handleFileUpload} />\n        </div>\n    );\n};\n\nexport default ExcelUpload;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}