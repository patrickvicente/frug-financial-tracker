{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport transactionsSlice from \"./transactionsSlice\";\nconst initialState = {\n  byCategory: {\n    clothing: {\n      category: \"clothing\",\n      budget: 1000,\n      totalSpent: 1500,\n      transactions: []\n    }\n  },\n  byMonth: {\n    \"August 2024\": {\n      totalBudget: 5000,\n      // Total budget for the month\n      totalSpent: 1500,\n      // Total spent across all categories for the month\n      remaining: 3500,\n      // Remaining budget for the month\n      categories: {\n        clothing: {\n          type: \"expense\",\n          // Could be 'expense' or 'income', depending on your app's needs\n          budget: 1000,\n          // Budget allocated for this category\n          totalSpent: 500,\n          // Total spent in this category\n          remaining: 500 // Remaining budget for this category\n        },\n        groceries: {\n          type: \"expense\",\n          budget: 1500,\n          totalSpent: 1000,\n          remaining: 500\n        }\n        // Add more categories as needed\n      }\n    }\n  }\n};\nconst budgetsSlice = createSlice({\n  name: \"budgets\",\n  initialState,\n  reducers: {\n    addBudget: (state, action) => {\n      const {\n        category,\n        budget\n      } = action.payload;\n      if (!state.byCategory[category] && budget >= 0) {\n        state.byCategory[category] = {\n          category,\n          budget,\n          totalSpent: 0,\n          transactions: []\n        };\n      }\n    },\n    editBudget: (state, action) => {\n      const {\n        category,\n        budget\n      } = action.payload;\n      if (state.byCategory[category]) {\n        state.byCategory[category].budget = budget;\n      }\n\n      // TO DO Implement Change name of category\n    },\n    addBudgetTransaction: (state, action) => {\n      const {\n        category,\n        amount,\n        date,\n        type\n      } = action.payload;\n      const month = new Date(date).toLocaleString(\"default\", {\n        month: \"long\",\n        year: \"numeric\"\n      });\n      if (!state.byMonth[month]) {\n        // Creates an object if new month\n        state.byMonth[month] = {\n          categories: {}\n        };\n      }\n      ;\n      if (type === \"income\") {\n        category = \"income\";\n      }\n      ;\n      if (!state.byMonth[month].categories[category]) {\n        // Creates a category object if new object\n        state.byMonth[month].categories[category] = {\n          budget: 0,\n          total: 0,\n          transactions: []\n        };\n      }\n      ;\n      if (!state.byCategory[category]) {\n        // create a new category object in the byCategory\n        state.byCategory[category] = {\n          category,\n          budget: 0,\n          total: 0,\n          transactions: []\n        };\n      }\n      state.byCategory[category].transactions.push(action.payload);\n      state.byCategory[category].total += amount;\n      state.byMonth[month].categories[category].transactions.push(action.payload);\n      state.byMonth[month].categories[category].total += amount;\n      console.log(\"Budget state\", state);\n    }\n  }\n});\nexport const {\n  addBudget,\n  editBudget,\n  addBudgetTransaction\n} = budgetsSlice.actions;\nexport default budgetsSlice.reducer;","map":{"version":3,"names":["createSlice","transactionsSlice","initialState","byCategory","clothing","category","budget","totalSpent","transactions","byMonth","totalBudget","remaining","categories","type","groceries","budgetsSlice","name","reducers","addBudget","state","action","payload","editBudget","addBudgetTransaction","amount","date","month","Date","toLocaleString","year","total","push","console","log","actions","reducer"],"sources":["/Users/patrickvicente/Documents/projects/frug-financial-tracker/src/redux/slices/budgetsSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport transactionsSlice from \"./transactionsSlice\";\n\nconst initialState = {\n    byCategory: {\n        clothing: {\n            category: \"clothing\",\n            budget: 1000,\n            totalSpent: 1500,\n            transactions: [],\n            \n        }\n    },\n    byMonth: {\n        \"August 2024\": {\n            totalBudget: 5000, // Total budget for the month\n            totalSpent: 1500, // Total spent across all categories for the month\n            remaining: 3500, // Remaining budget for the month\n            categories: {\n                clothing: {\n                    type: \"expense\", // Could be 'expense' or 'income', depending on your app's needs\n                    budget: 1000, // Budget allocated for this category\n                    totalSpent: 500, // Total spent in this category\n                    remaining: 500, // Remaining budget for this category\n                },\n                groceries: {\n                    type: \"expense\",\n                    budget: 1500,\n                    totalSpent: 1000,\n                    remaining: 500,\n                },\n                // Add more categories as needed\n            },\n        },\n    },\n};\n\nconst budgetsSlice = createSlice({\n    name: \"budgets\",\n    initialState,\n    reducers: {\n        addBudget: (state, action) => {\n            const { category, budget } = action.payload;\n\n            if (!state.byCategory[category] && budget >= 0) {\n                state.byCategory[category] = {\n                    category,\n                    budget,\n                    totalSpent: 0,\n                    transactions: []\n                };\n            }\n        },\n        editBudget: (state, action) => {\n            const { category, budget } = action.payload;\n            if (state.byCategory[category]) {\n                state.byCategory[category].budget = budget;    \n            }\n            \n            // TO DO Implement Change name of category\n        },\n        addBudgetTransaction: (state, action) => {\n            const { category, amount, date, type } = action.payload;\n            const month = new Date(date).toLocaleString(\"default\", {month: \"long\", year: \"numeric\"});\n\n            if (!state.byMonth[month]) {\n                // Creates an object if new month\n                state.byMonth[month] = { categories: {}}\n            };\n\n            if (type === \"income\") {\n                category = \"income\";\n            };\n\n            if (!state.byMonth[month].categories[category]) {\n                // Creates a category object if new object\n                state.byMonth[month].categories[category] = { budget: 0, total: 0, transactions: []};\n            };\n\n            if (!state.byCategory[category]) {\n                // create a new category object in the byCategory\n                state.byCategory[category] = {category, budget: 0, total: 0, transactions: []};\n            }\n\n            state.byCategory[category].transactions.push(action.payload);\n            state.byCategory[category].total += amount;\n            \n            state.byMonth[month].categories[category].transactions.push(action.payload);\n            state.byMonth[month].categories[category].total += amount;\n\n\n            console.log(\"Budget state\", state);\n        },\n    }\n});\n\nexport const { addBudget, editBudget, addBudgetTransaction } = budgetsSlice.actions;\nexport default budgetsSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}