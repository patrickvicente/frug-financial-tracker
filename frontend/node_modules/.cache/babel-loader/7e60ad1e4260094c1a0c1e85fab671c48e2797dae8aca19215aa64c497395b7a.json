{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  byCategory: {\n    clothing: {\n      category: \"clothing\",\n      budget: 0,\n      totalSpent: 0,\n      transactionIds: []\n    }\n  },\n  byMonth: {\n    \"2024-08\": {\n      totalBudget: 0,\n      // Total budget for the month\n      totalSpent: 0,\n      // Total spent across all categories for the month\n      remaining: 0,\n      // Remaining budget for the month\n      categories: {\n        clothing: {\n          budget: 0,\n          // Budget allocated for this category\n          totalSpent: 0,\n          // Total spent in this category\n          remaining: 0,\n          // Remaining budget for this category\n          transactionIds: []\n        },\n        grocery: {\n          budget: 0,\n          totalSpent: 0,\n          remaining: 0,\n          transactionIds: []\n        }\n      }\n    }\n  }\n};\nconst budgetsSlice = createSlice({\n  name: \"budgets\",\n  initialState,\n  reducers: {\n    addBudget: (state, action) => {\n      console.log(\"Add Budget Slice\", action.payload);\n      const {\n        monthYear,\n        category,\n        budget\n      } = action.payload;\n      const formattedCategory = category.toLowerCase(); // formats the category\n\n      // initializes category if it doesn't exist yet\n      if (!state.byCategory[formattedCategory]) {\n        state.byCategory[formattedCategory] = {\n          category: formattedCategory,\n          budget,\n          totalSpent: 0,\n          transactionIds: []\n        };\n      } else {\n        // Update the budget for existing category\n        state.byCategory[formattedCategory].budget += budget;\n      }\n\n      // Initialize monthYear if it doesn't exist\n      if (!state.byMonth[monthYear]) {\n        state.byMonth[monthYear] = {\n          totalBudget: 0,\n          totalSpent: 0,\n          remaining: 0,\n          categories: {}\n        };\n      }\n      // Initialize or update the category within the monthYear\n      if (!state.byMonth[monthYear].categories[formattedCategory]) {\n        state.byMonth[monthYear].categories[formattedCategory] = {\n          budget,\n          remaining: budget,\n          totalSpent: 0,\n          transactionIds: []\n        };\n      } else {\n        // If category already exists in the monthYear, update the budget\n        const existingCategory = state.byMonth[monthYear].categories[formattedCategory];\n        // Update the category budget\n        existingCategory.budget += budget;\n        // Recalculate the remaining amount for this category\n        existingCategory.remaining = existingCategory.budget - existingCategory.totalSpent;\n      }\n      // Adjust totalBudget and remaining for expense categories\n      state.byMonth[monthYear].totalBudget += budget;\n      state.byMonth[monthYear].remaining = state.byMonth[monthYear].totalBudget - state.byMonth[monthYear].totalSpent;\n    },\n    editBudget: (state, action) => {\n      const {\n        category,\n        budget\n      } = action.payload;\n      if (state.byCategory[category]) {\n        state.byCategory[category].budget = budget;\n      }\n\n      // TO DO Implement Change name of category\n    },\n    addBudgetTransaction: (state, action) => {\n      const {\n        category,\n        amount,\n        date,\n        type\n      } = action.payload;\n      if (type === \"expense\") {\n        const dateObj = new Date(date);\n        const year = dateObj.getFullYear();\n        const month = (\"0\" + (dateObj.getMonth() + 1)).slice(-2); // Ensures two digits\n        const yearMonth = `${year}-${month}`;\n        const formattedCategory = category.toLowerCase();\n        if (!state.byMonth[yearMonth]) {\n          // Creates an object if new month\n          state.byMonth[yearMonth] = {\n            totalBudget: 0,\n            totalSpent: 0,\n            remaining: 0,\n            categories: {}\n          };\n        }\n        if (!state.byMonth[yearMonth].categories[formattedCategory]) {\n          // Creates a category object if new object\n          state.byMonth[yearMonth].categories[formattedCategory] = {\n            budget: 0,\n            totalSpent: 0,\n            remaining: 0,\n            transactionIds: []\n          };\n        }\n        // Ensure the category is initialized in byCategory\n        if (!state.byCategory[formattedCategory]) {\n          state.byCategory[formattedCategory] = {\n            formattedCategory,\n            budget: 0,\n            totalSpent: 0,\n            transactionIds: []\n          };\n        }\n\n        // Update transactions and totals\n        state.byCategory[formattedCategory].transactionIds.push(action.payload.id);\n        state.byCategory[formattedCategory].totalSpent += amount;\n\n        // Update the total spent and transaction IDs in the monthly category\n        state.byMonth[yearMonth].categories[formattedCategory].totalSpent += amount;\n        state.byMonth[yearMonth].categories[formattedCategory].transactionIds.push(action.payload.id);\n\n        // Update remaining budget for the category in that month\n        const monthlyBudget = state.byMonth[yearMonth].categories[formattedCategory].budget;\n        state.byMonth[yearMonth].categories[formattedCategory].remaining = monthlyBudget - state.byMonth[yearMonth].categories[formattedCategory].totalSpent;\n\n        // Update the overall total spent for the month\n        state.byMonth[yearMonth].totalSpent += amount;\n        state.byMonth[yearMonth].remaining = state.byMonth[yearMonth].totalBudget - state.byMonth[yearMonth].totalSpent;\n      }\n    }\n  }\n});\nexport const {\n  addBudget,\n  editBudget,\n  addBudgetTransaction\n} = budgetsSlice.actions;\nexport default budgetsSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","byCategory","clothing","category","budget","totalSpent","transactionIds","byMonth","totalBudget","remaining","categories","grocery","budgetsSlice","name","reducers","addBudget","state","action","console","log","payload","monthYear","formattedCategory","toLowerCase","existingCategory","editBudget","addBudgetTransaction","amount","date","type","dateObj","Date","year","getFullYear","month","getMonth","slice","yearMonth","push","id","monthlyBudget","actions","reducer"],"sources":["/Users/patrickvicente/Documents/projects/frug-financial-tracker/src/redux/slices/budgetsSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    byCategory: {\n        clothing: {\n            category: \"clothing\",\n            budget: 0,\n            totalSpent: 0,\n            transactionIds: [],\n        }\n    },\n    byMonth: {\n        \"2024-08\": {\n            totalBudget: 0, // Total budget for the month\n            totalSpent: 0, // Total spent across all categories for the month\n            remaining: 0, // Remaining budget for the month\n            categories: {\n                clothing: {\n                    budget: 0, // Budget allocated for this category\n                    totalSpent: 0, // Total spent in this category\n                    remaining: 0, // Remaining budget for this category\n                    transactionIds: [],\n                },\n                grocery: {\n                    budget: 0,\n                    totalSpent: 0,\n                    remaining: 0,\n                    transactionIds: [],\n                },\n            },\n        },\n    },\n};\n\nconst budgetsSlice = createSlice({\n    name: \"budgets\",\n    initialState,\n    reducers: {\n        addBudget: (state, action) => {\n            console.log(\"Add Budget Slice\", action.payload);\n            const { monthYear, category, budget } = action.payload;\n            const formattedCategory = category.toLowerCase(); // formats the category\n\n            // initializes category if it doesn't exist yet\n            if (!state.byCategory[formattedCategory]) {\n                state.byCategory[formattedCategory] = {\n                    category: formattedCategory,\n                    budget,\n                    totalSpent: 0,\n                    transactionIds: []\n                }\n            } else {\n                // Update the budget for existing category\n                state.byCategory[formattedCategory].budget += budget;\n            }\n            \n            // Initialize monthYear if it doesn't exist\n            if (!state.byMonth[monthYear]) {\n                state.byMonth[monthYear] = {\n                    totalBudget: 0,\n                    totalSpent: 0,\n                    remaining: 0, \n                    categories: {}\n                };\n            }\n            // Initialize or update the category within the monthYear\n            if (!state.byMonth[monthYear].categories[formattedCategory]) {\n                state.byMonth[monthYear].categories[formattedCategory] = { \n                    budget,\n                    remaining: budget,\n                    totalSpent: 0, \n                    transactionIds: []\n                }\n            } else {\n                // If category already exists in the monthYear, update the budget\n                const existingCategory = state.byMonth[monthYear].categories[formattedCategory];\n                // Update the category budget\n                existingCategory.budget += budget;\n                // Recalculate the remaining amount for this category\n                existingCategory.remaining = existingCategory.budget - existingCategory.totalSpent;\n            }\n            // Adjust totalBudget and remaining for expense categories\n            state.byMonth[monthYear].totalBudget += budget;\n            state.byMonth[monthYear].remaining = state.byMonth[monthYear].totalBudget - state.byMonth[monthYear].totalSpent;\n        },\n        editBudget: (state, action) => {\n            const { category, budget } = action.payload;\n            if (state.byCategory[category]) {\n                state.byCategory[category].budget = budget;    \n            }\n            \n            // TO DO Implement Change name of category\n        },\n        addBudgetTransaction: (state, action) => {\n            const { category, amount, date, type } = action.payload;\n            if (type === \"expense\") {\n                const dateObj = new Date(date);\n                const year = dateObj.getFullYear();\n                const month = (\"0\" + (dateObj.getMonth() + 1)).slice(-2); // Ensures two digits\n                const yearMonth = `${year}-${month}`;\n                const formattedCategory = category.toLowerCase();\n\n\n                if (!state.byMonth[yearMonth]) {\n                    // Creates an object if new month\n                    state.byMonth[yearMonth] = { totalBudget: 0, totalSpent: 0, remaining: 0, categories: {}}\n                }\n\n                if (!state.byMonth[yearMonth].categories[formattedCategory]) {\n                    // Creates a category object if new object\n                    state.byMonth[yearMonth].categories[formattedCategory] = { budget: 0, totalSpent: 0, remaining: 0, transactionIds: [] };\n                }\n                // Ensure the category is initialized in byCategory\n                if (!state.byCategory[formattedCategory]) {\n                    state.byCategory[formattedCategory] = {formattedCategory, budget: 0, totalSpent: 0, transactionIds: [] };\n                }\n\n                // Update transactions and totals\n                state.byCategory[formattedCategory].transactionIds.push(action.payload.id);\n                state.byCategory[formattedCategory].totalSpent += amount;\n\n                // Update the total spent and transaction IDs in the monthly category\n                state.byMonth[yearMonth].categories[formattedCategory].totalSpent += amount;\n                state.byMonth[yearMonth].categories[formattedCategory].transactionIds.push(action.payload.id);\n\n                // Update remaining budget for the category in that month\n                const monthlyBudget = state.byMonth[yearMonth].categories[formattedCategory].budget;\n                state.byMonth[yearMonth].categories[formattedCategory].remaining = monthlyBudget - state.byMonth[yearMonth].categories[formattedCategory].totalSpent;\n\n                // Update the overall total spent for the month\n                state.byMonth[yearMonth].totalSpent += amount;\n                state.byMonth[yearMonth].remaining = state.byMonth[yearMonth].totalBudget - state.byMonth[yearMonth].totalSpent;\n            }\n        },\n    },\n});\n\nexport const { addBudget, editBudget, addBudgetTransaction } = budgetsSlice.actions;\nexport default budgetsSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}