{"ast":null,"code":"var _jsxFileName = \"/Users/patrickvicente/Documents/projects/frug-financial-tracker/src/components/Excel/ExcelUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExcelUploader = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = event => {\n      const binaryStr = event.target.result;\n      const workbook = XLSX.read(binaryStr, {\n        type: 'binary'\n      });\n\n      // Assuming you want the first sheet\n      const worksheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[worksheetName];\n\n      // Parse the sheet into a JSON array\n      const jsonData = XLSX.utils.sheet_to_json(worksheet);\n      setData(jsonData);\n      console.log(jsonData);\n    };\n    reader.readAsBinaryString(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".xls,.xlsx\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), data.length > 0 && /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: Object.keys(data[0]).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: key\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: Object.values(row).map((value, i) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: value\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 37\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n_s(ExcelUploader, \"hhQqYsxLIv1exGOzUvDGOVv6fXw=\");\n_c = ExcelUploader;\nexport default ExcelUploader;\nvar _c;\n$RefreshReg$(_c, \"ExcelUploader\");","map":{"version":3,"names":["React","useState","XLSX","jsxDEV","_jsxDEV","ExcelUploader","_s","data","setData","handleFileUpload","e","file","target","files","reader","FileReader","onload","event","binaryStr","result","workbook","read","type","worksheetName","SheetNames","worksheet","Sheets","jsonData","utils","sheet_to_json","console","log","readAsBinaryString","children","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","length","Object","keys","map","key","row","index","values","value","i","_c","$RefreshReg$"],"sources":["/Users/patrickvicente/Documents/projects/frug-financial-tracker/src/components/Excel/ExcelUploader.js"],"sourcesContent":["import React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\n\nconst ExcelUploader = () => {\n    const [data, setData] = useState([]);\n\n    const handleFileUpload = (e) => {\n        const file = e.target.files[0];\n        const reader = new FileReader();\n\n        reader.onload = (event) => {\n            const binaryStr = event.target.result;\n            const workbook = XLSX.read(binaryStr, { type: 'binary' });\n\n            // Assuming you want the first sheet\n            const worksheetName = workbook.SheetNames[0];\n            const worksheet = workbook.Sheets[worksheetName];\n\n            // Parse the sheet into a JSON array\n            const jsonData = XLSX.utils.sheet_to_json(worksheet);\n\n            setData(jsonData);\n            console.log(jsonData);\n        };\n\n        reader.readAsBinaryString(file);\n    };\n\n    return (\n        <div>\n            <input\n                type=\"file\"\n                accept=\".xls,.xlsx\"\n                onChange={handleFileUpload}\n            />\n            {data.length > 0 && (\n                <table>\n                    <thead>\n                        <tr>\n                            {Object.keys(data[0]).map((key) => (\n                                <th key={key}>{key}</th>\n                            ))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {data.map((row, index) => (\n                            <tr key={index}>\n                                {Object.values(row).map((value, i) => (\n                                    <td key={i}>{value}</td>\n                                ))}\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            )}\n        </div>\n    );\n};\n\nexport default ExcelUploader;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}