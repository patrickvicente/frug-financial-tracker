{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  byCategory: {\n    clothing: {\n      category: \"clothing\",\n      type: \"expense\",\n      budget: 0,\n      totalSpent: 0,\n      transactionIds: []\n    }\n  },\n  byMonth: {\n    \"2024-08\": {\n      totalBudget: 0,\n      // Total budget for the month\n      totalSpent: 0,\n      // Total spent across all categories for the month\n      remaining: 0,\n      // Remaining budget for the month\n      categories: {\n        clothing: {\n          type: \"expense\",\n          // Could be 'expense' or 'income'\n          budget: 0,\n          // Budget allocated for this category\n          totalSpent: 0,\n          // Total spent in this category\n          remaining: 0,\n          // Remaining budget for this category\n          transactionIds: []\n        },\n        grocery: {\n          type: \"expense\",\n          budget: 0,\n          totalSpent: 0,\n          remaining: 0,\n          transactionIds: []\n        }\n      }\n    }\n  }\n};\nconst budgetsSlice = createSlice({\n  name: \"budgets\",\n  initialState,\n  reducers: {\n    addBudget: (state, action) => {\n      const {\n        monthYear,\n        category,\n        budget,\n        type\n      } = action.payload;\n      const formatCategory = category.toLowerCase(); // formats the category\n\n      // Checks if category exists if not, creates a new object\n      if (!state.byCategory[formatCategory] && budget >= 0) {\n        state.byCategory[formatCategory] = {\n          formatCategory,\n          type,\n          budget,\n          totalSpent: 0,\n          transactionIds: []\n        };\n      } else {\n        // updated the total budget of the category if it exists\n        state.byCategory[formatCategory].budget += budget;\n      }\n\n      // Ensure the monthYear exists in the byMonth\n      if (!state.byMonth[monthYear]) {\n        state.byMonth[monthYear] = {\n          totalBudget: 0,\n          totalSpent: 0,\n          remaining: 0,\n          categories: {}\n        };\n      }\n      if (!state.byMonth[monthYear].categories[formatCategory]) {\n        state.byMonth[monthYear].categories[formatCategory] = {\n          type,\n          budget,\n          totalSpent: 0,\n          transactionIds: []\n        };\n        if (type === \"income\") {\n          state.byMonth[monthYear].remaining += budget; // Adds income to remaining amount\n        } else {\n          state.byMonth[monthYear].totalBudget += budget; // add the budget to totalBudget\n          state.byMonth[monthYear].remaining -= budget; // updates the remaining amount\n        }\n      }\n    },\n    editBudget: (state, action) => {\n      const {\n        category,\n        budget\n      } = action.payload;\n      if (state.byCategory[category]) {\n        state.byCategory[category].budget = budget;\n      }\n\n      // TO DO Implement Change name of category\n    },\n    addBudgetTransaction: (state, action) => {\n      const {\n        category,\n        amount,\n        date,\n        type\n      } = action.payload;\n      const dateObj = new Date(date);\n      const year = dateObj.getFullYear();\n      const month = (\"0\" + (dateObj.getMonth() + 1)).slice(-2); // Ensures two digits\n      const yearMonth = `${year}-${month}`;\n      const formattedCategory = category.toLowerCase();\n      if (!state.byMonth[yearMonth]) {\n        // Creates an object if new month\n        state.byMonth[yearMonth] = {\n          categories: {}\n        };\n      }\n      if (!state.byMonth[yearMonth].categories[formattedCategory]) {\n        // Creates a category object if new object\n        state.byMonth[yearMonth].categories[formattedCategory] = {\n          type,\n          totalSpent: 0,\n          transactionIds: []\n        };\n      }\n      // Ensure the category is initialized in byCategory\n      if (!state.byCategory[formattedCategory]) {\n        state.byCategory[formattedCategory] = {\n          type,\n          formattedCategory,\n          totalSpent: 0,\n          transactionIds: []\n        };\n      } else {\n        // Only update transactions and totals if category already exists\n        state.byCategory[formattedCategory].transactionIds.push(action.payload.id);\n        state.byCategory[formattedCategory].totalSpent += amount;\n        state.byMonth[yearMonth].categories[formattedCategory].transactionIds.push(action.payload.id);\n        state.byMonth[yearMonth].categories[formattedCategory].totalSpent += amount;\n      }\n    }\n  }\n});\nexport const {\n  addBudget,\n  editBudget,\n  addBudgetTransaction\n} = budgetsSlice.actions;\nexport default budgetsSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","byCategory","clothing","category","type","budget","totalSpent","transactionIds","byMonth","totalBudget","remaining","categories","grocery","budgetsSlice","name","reducers","addBudget","state","action","monthYear","payload","formatCategory","toLowerCase","editBudget","addBudgetTransaction","amount","date","dateObj","Date","year","getFullYear","month","getMonth","slice","yearMonth","formattedCategory","push","id","actions","reducer"],"sources":["/Users/patrickvicente/Documents/projects/frug-financial-tracker/src/redux/slices/budgetsSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    byCategory: {\n        clothing: {\n            category: \"clothing\",\n            type: \"expense\",\n            budget: 0,\n            totalSpent: 0,\n            transactionIds: [],\n        }\n    },\n    byMonth: {\n        \"2024-08\": {\n            totalBudget: 0, // Total budget for the month\n            totalSpent: 0, // Total spent across all categories for the month\n            remaining: 0, // Remaining budget for the month\n            categories: {\n                clothing: {\n                    type: \"expense\", // Could be 'expense' or 'income'\n                    budget: 0, // Budget allocated for this category\n                    totalSpent: 0, // Total spent in this category\n                    remaining: 0, // Remaining budget for this category\n                    transactionIds: [],\n                },\n                grocery: {\n                    type: \"expense\",\n                    budget: 0,\n                    totalSpent: 0,\n                    remaining: 0,\n                    transactionIds: [],\n                },\n            },\n        },\n    },\n};\n\nconst budgetsSlice = createSlice({\n    name: \"budgets\",\n    initialState,\n    reducers: {\n        addBudget: (state, action) => {\n            const { monthYear, category, budget, type } = action.payload;\n            const formatCategory = category.toLowerCase(); // formats the category\n\n            // Checks if category exists if not, creates a new object\n            if (!state.byCategory[formatCategory] && budget >= 0) {\n                state.byCategory[formatCategory] = {\n                    formatCategory,\n                    type,\n                    budget,\n                    totalSpent: 0,\n                    transactionIds: []\n                };\n            } else {\n                // updated the total budget of the category if it exists\n                state.byCategory[formatCategory].budget += budget;\n            }\n\n            // Ensure the monthYear exists in the byMonth\n            if (!state.byMonth[monthYear]) {\n                state.byMonth[monthYear] = {\n                    totalBudget: 0,\n                    totalSpent: 0,\n                    remaining: 0,\n                    categories: {}\n                };\n            }\n\n            if (!state.byMonth[monthYear].categories[formatCategory]) {\n                state.byMonth[monthYear].categories[formatCategory] = { type, budget, totalSpent: 0, transactionIds: []};\n                \n                if (type === \"income\") {\n                    state.byMonth[monthYear].remaining += budget; // Adds income to remaining amount\n                } else {\n                    state.byMonth[monthYear].totalBudget += budget; // add the budget to totalBudget\n                    state.byMonth[monthYear].remaining -= budget; // updates the remaining amount\n                }\n            }\n\n        },\n        editBudget: (state, action) => {\n            const { category, budget } = action.payload;\n            if (state.byCategory[category]) {\n                state.byCategory[category].budget = budget;    \n            }\n            \n            // TO DO Implement Change name of category\n        },\n        addBudgetTransaction: (state, action) => {\n            const { category, amount, date, type } = action.payload;\n            const dateObj = new Date(date);\n            const year = dateObj.getFullYear();\n            const month = (\"0\" + (dateObj.getMonth() + 1)).slice(-2); // Ensures two digits\n            const yearMonth = `${year}-${month}`;\n            const formattedCategory = category.toLowerCase();\n        \n            if (!state.byMonth[yearMonth]) {\n                // Creates an object if new month\n                state.byMonth[yearMonth] = { categories: {}}\n            }\n        \n            if (!state.byMonth[yearMonth].categories[formattedCategory]) {\n                // Creates a category object if new object\n                state.byMonth[yearMonth].categories[formattedCategory] = {type, totalSpent: 0, transactionIds: [] };\n            }\n            // Ensure the category is initialized in byCategory\n            if (!state.byCategory[formattedCategory]) {\n                state.byCategory[formattedCategory] = { type, formattedCategory, totalSpent: 0, transactionIds: [] };\n            } else {\n                // Only update transactions and totals if category already exists\n                state.byCategory[formattedCategory].transactionIds.push(action.payload.id);\n                state.byCategory[formattedCategory].totalSpent += amount;\n        \n                state.byMonth[yearMonth].categories[formattedCategory].transactionIds.push(action.payload.id);\n                state.byMonth[yearMonth].categories[formattedCategory].totalSpent += amount;\n            }\n        },\n    }\n});\n\nexport const { addBudget, editBudget, addBudgetTransaction } = budgetsSlice.actions;\nexport default budgetsSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}