{"ast":null,"code":"var _jsxFileName = \"/Users/patrickvicente/Documents/projects/frug-financial-tracker/src/components/Excel/ExcelUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport { useDispatch } from \"react-redux\";\nimport { addTransaction } from \"../../redux/slices/transactionsSlice\";\nimport { addBudget, addBudgetTransaction } from \"../../redux/slices/budgetsSlice\";\nimport { excelDateToJSDate } from \"../../utils/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExcelUpload = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const dispatch = useDispatch();\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    setFile(file);\n    const reader = new FileReader();\n    reader.onload = event => {\n      const data = new Uint8Array(event.target.result);\n      const workbook = XLSX.read(data, {\n        type: \"array\"\n      });\n\n      // Read Transactions Sheet\n      const transactionsSheet = workbook.Sheets[workbook.SheetNames[0]];\n      const transactionsData = XLSX.utils.sheet_to_json(transactionsSheet);\n      transactionsData.forEach((row, index) => {\n        const transactionDate = excelDateToJSDate(row.Date).toLocaleDateString(\"en-US\", {\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric'\n        });\n        const transaction = {\n          id: index + 1,\n          type: row.Type.toLowerCase(),\n          description: row.Description,\n          date: transactionDate,\n          amount: parseFloat(row.Amount),\n          category: row.Category\n        };\n        dispatch(addTransaction(transaction));\n        dispatch(addBudgetTransaction(transaction));\n      });\n\n      // Read Budgets Sheet\n      const budgetsSheet = workbook.Sheets[workbook.SheetNames[1]];\n      const budgetsData = XLSX.utils.sheet_to_json(budgetsSheet);\n      budgetsData.forEach(row => {\n        const budget = {\n          monthYear: row.MonthYear,\n          category: row.Category.toLowerCase(),\n          budget: parseFloat(row.Budget),\n          type: row.Type.toLowerCase()\n        };\n        dispatch(addBudget(budget));\n        console.log(\"uploaded budget\", budget);\n      });\n    };\n    reader.readAsArrayBuffer(file);\n  };\n  const handleDownloadTemplate = () => {\n    // Instructions sheet data\n    const instructionsData = [[\"Instructions\"], [\"\"], [\"1. Transactions Sheet\"], [\"- 'Date': Enter the transaction date in MM/DD/YYYY format.\"], [\"- 'Type': Specify whether the transaction is 'income' or 'expense'.\"], [\"- 'Description': Provide a brief description of the transaction.\"], [\"- 'Amount': Enter the transaction amount as a number (e.g., 100.50).\"], [\"- 'Category': Enter the category under which the transaction falls (e.g., 'Groceries', 'Salary').\"], [\"\"], [\"2. Budgets Sheet\"], [\"- 'MonthYear': Enter the month and year in YYYY-MM format (e.g., '2024-08').\"], [\"- 'Category': Enter the budget category (e.g., 'Groceries', 'Rent').\"], [\"- 'Budget': Enter the budgeted amount as a number (e.g., 500.00).\"], [\"- 'Type': Specify whether the budget is for 'income' or 'expense'.\"], [\"\"], [\"Note: Ensure that all data is filled in correctly as per the instructions to avoid errors during processing.\"]];\n\n    // Transactions sheet template\n    const transactionsTemplate = [[\"Date\", \"Type\", \"Description\", \"Amount\", \"Category\"]];\n\n    // Budgets sheet template\n    const budgetsTemplate = [[\"MonthYear\", \"Category\", \"Budget\", \"Type\"]];\n\n    // Create a new workbook and add sheets\n    const workbook = XLSX.utils.book_new();\n\n    // Add Instructions sheet\n    const instructionsSheet = XLSX.utils.aoa_to_sheet(instructionsData);\n    XLSX.utils.book_append_sheet(workbook, instructionsSheet, \"Instructions\");\n\n    // Add Transactions sheet template\n    const transactionsSheet = XLSX.utils.aoa_to_sheet(transactionsTemplate);\n    XLSX.utils.book_append_sheet(workbook, transactionsSheet, \"Transactions\");\n\n    // Add Budgets sheet template\n    const budgetsSheet = XLSX.utils.aoa_to_sheet(budgetsTemplate);\n    XLSX.utils.book_append_sheet(workbook, budgetsSheet, \"Budgets\");\n\n    // Generate the Excel file and trigger download\n    XLSX.writeFile(workbook, \"Frug_Finance_Template.xlsx\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDownloadTemplate,\n      children: \"Download Excel Template\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n};\n_s(ExcelUpload, \"b51JiNiem4pzzK8vsAFrsSKTsC0=\", false, function () {\n  return [useDispatch];\n});\n_c = ExcelUpload;\nexport default ExcelUpload;\nvar _c;\n$RefreshReg$(_c, \"ExcelUpload\");","map":{"version":3,"names":["React","useState","XLSX","useDispatch","addTransaction","addBudget","addBudgetTransaction","excelDateToJSDate","jsxDEV","_jsxDEV","ExcelUpload","_s","file","setFile","dispatch","handleFileUpload","e","target","files","reader","FileReader","onload","event","data","Uint8Array","result","workbook","read","type","transactionsSheet","Sheets","SheetNames","transactionsData","utils","sheet_to_json","forEach","row","index","transactionDate","Date","toLocaleDateString","year","month","day","transaction","id","Type","toLowerCase","description","Description","date","amount","parseFloat","Amount","category","Category","budgetsSheet","budgetsData","budget","monthYear","MonthYear","Budget","console","log","readAsArrayBuffer","handleDownloadTemplate","instructionsData","transactionsTemplate","budgetsTemplate","book_new","instructionsSheet","aoa_to_sheet","book_append_sheet","writeFile","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onChange","_c","$RefreshReg$"],"sources":["/Users/patrickvicente/Documents/projects/frug-financial-tracker/src/components/Excel/ExcelUpload.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport { useDispatch } from \"react-redux\";\nimport { addTransaction } from \"../../redux/slices/transactionsSlice\";\nimport { addBudget, addBudgetTransaction } from \"../../redux/slices/budgetsSlice\";\nimport { excelDateToJSDate } from \"../../utils/utils\";\n\nconst ExcelUpload = () => {\n    const [file, setFile] = useState(null);\n    const dispatch = useDispatch();\n\n    const handleFileUpload = (e) => {\n        const file = e.target.files[0];\n        setFile(file);\n\n        const reader = new FileReader();\n        reader.onload = (event) => {\n            const data = new Uint8Array(event.target.result);\n            const workbook = XLSX.read(data, { type: \"array\" });\n\n            // Read Transactions Sheet\n            const transactionsSheet = workbook.Sheets[workbook.SheetNames[0]];\n            const transactionsData = XLSX.utils.sheet_to_json(transactionsSheet);\n\n            transactionsData.forEach((row, index) => {\n                const transactionDate = excelDateToJSDate(row.Date).toLocaleDateString(\"en-US\", {\n                    year: 'numeric',\n                    month: 'long',\n                    day: 'numeric',\n                });\n\n                const transaction = {\n                    id: index + 1,\n                    type: row.Type.toLowerCase(),\n                    description: row.Description,\n                    date: transactionDate,\n                    amount: parseFloat(row.Amount),\n                    category: row.Category,\n                };\n                dispatch(addTransaction(transaction));\n                dispatch(addBudgetTransaction(transaction));\n            });\n\n            // Read Budgets Sheet\n            const budgetsSheet = workbook.Sheets[workbook.SheetNames[1]];\n            const budgetsData = XLSX.utils.sheet_to_json(budgetsSheet);\n\n            budgetsData.forEach((row) => {\n                const budget = {\n                    monthYear: row.MonthYear,\n                    category: row.Category.toLowerCase(),\n                    budget: parseFloat(row.Budget),\n                    type: row.Type.toLowerCase(),\n                };\n                dispatch(addBudget(budget));\n                console.log(\"uploaded budget\", budget);\n            });\n        };\n\n        reader.readAsArrayBuffer(file);\n    };\n\n    const handleDownloadTemplate = () => {\n        // Instructions sheet data\n        const instructionsData = [\n            [\"Instructions\"],\n            [\"\"],\n            [\"1. Transactions Sheet\"],\n            [\"- 'Date': Enter the transaction date in MM/DD/YYYY format.\"],\n            [\"- 'Type': Specify whether the transaction is 'income' or 'expense'.\"],\n            [\"- 'Description': Provide a brief description of the transaction.\"],\n            [\"- 'Amount': Enter the transaction amount as a number (e.g., 100.50).\"],\n            [\"- 'Category': Enter the category under which the transaction falls (e.g., 'Groceries', 'Salary').\"],\n            [\"\"],\n            [\"2. Budgets Sheet\"],\n            [\"- 'MonthYear': Enter the month and year in YYYY-MM format (e.g., '2024-08').\"],\n            [\"- 'Category': Enter the budget category (e.g., 'Groceries', 'Rent').\"],\n            [\"- 'Budget': Enter the budgeted amount as a number (e.g., 500.00).\"],\n            [\"- 'Type': Specify whether the budget is for 'income' or 'expense'.\"],\n            [\"\"],\n            [\"Note: Ensure that all data is filled in correctly as per the instructions to avoid errors during processing.\"]\n        ];\n\n        // Transactions sheet template\n        const transactionsTemplate = [\n            [\"Date\", \"Type\", \"Description\", \"Amount\", \"Category\"]\n        ];\n\n        // Budgets sheet template\n        const budgetsTemplate = [\n            [\"MonthYear\", \"Category\", \"Budget\", \"Type\"]\n        ];\n\n        // Create a new workbook and add sheets\n        const workbook = XLSX.utils.book_new();\n\n        // Add Instructions sheet\n        const instructionsSheet = XLSX.utils.aoa_to_sheet(instructionsData);\n        XLSX.utils.book_append_sheet(workbook, instructionsSheet, \"Instructions\");\n\n        // Add Transactions sheet template\n        const transactionsSheet = XLSX.utils.aoa_to_sheet(transactionsTemplate);\n        XLSX.utils.book_append_sheet(workbook, transactionsSheet, \"Transactions\");\n\n        // Add Budgets sheet template\n        const budgetsSheet = XLSX.utils.aoa_to_sheet(budgetsTemplate);\n        XLSX.utils.book_append_sheet(workbook, budgetsSheet, \"Budgets\");\n\n        // Generate the Excel file and trigger download\n        XLSX.writeFile(workbook, \"Frug_Finance_Template.xlsx\");\n    };\n\n    return (\n        <div>\n            <button onClick={handleDownloadTemplate}>Download Excel Template</button>\n            <input type=\"file\" onChange={handleFileUpload} />\n        </div>\n    );\n};\n\nexport default ExcelUpload;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}