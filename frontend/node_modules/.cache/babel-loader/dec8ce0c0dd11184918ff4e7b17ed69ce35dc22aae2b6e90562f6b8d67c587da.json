{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  ac1: {\n    name: \"spending\",\n    type: \"spending\",\n    // spending, savings, investment, credit, loan\n    startingBalance: 0,\n    currentBalance: 0,\n    transactionIds: []\n  },\n  ac2: {\n    name: \"NAB\",\n    type: \"credit\",\n    // spending, savings, investment, credit, loan\n    startingBalance: 0,\n    currentBalance: 0,\n    transactionIds: []\n  }\n};\nconst accountsSlice = createSlice({\n  name: \"accounts\",\n  initialState,\n  reducers: {\n    addAccount: (state, action) => {\n      const {\n        id,\n        name,\n        type,\n        startingBalance\n      } = action.payload;\n      if (!id || !name || !type || isNaN(startingBalance)) {\n        console.error(\"Invalid account data\");\n        return;\n      }\n      state[id] = {\n        name,\n        type,\n        startingBalance,\n        currentBalance: startingBalance,\n        transactionIds: []\n      };\n    },\n    editAccount: (state, action) => {\n      const {\n        id,\n        name,\n        type\n      } = action.payload;\n      // check if the id is valid then update\n      if (!state[id]) {\n        console.error(`Account with ID ${id} does not exist`);\n        return;\n      }\n      state[id].name = name;\n      state[id].type = type;\n    },\n    transferAmount: (state, action) => {\n      const {\n        fromAccountId,\n        toAccountId,\n        amount\n      } = action.payload;\n      if (!state[fromAccountId] || !state[toAccountId]) {\n        throw new Error(\"Invalid account IDs provided for transfer\");\n      }\n      const fromAccount = state[fromAccountId];\n      const toAccount = state[toAccountId];\n      // Check if the amount is available from the account\n      if (fromAccount.currentBalance < amount && fromAccount.type !== \"credit\" && fromAccount.type !== \"loan\") {\n        console.error(\"Insufficient funds for transfer\");\n        return;\n      }\n      fromAccount.currentBalance -= amount; // deduct amount from the outgoing account\n      toAccount.currentBalance += amount; // add amount to ongoing account   \n    },\n    addAccountsTransaction: (state, action) => {\n      const {\n        id,\n        transaction\n      } = action.payload;\n      // check if id object exist\n      if (!state[id]) {\n        console.error(`Account with ID ${id} does not exist`);\n        return;\n      }\n      // check if it transaction income or expense\n      if (transaction.type.toLowerCase() === \"expense\") {\n        state[id].currentBalance -= transaction.amount;\n      } else {\n        state[id].currentBalance += transaction.amount;\n      }\n      state[id].transactionIds.push(transaction.id);\n    }\n  }\n});\nexport const {\n  addAccount,\n  editAccount,\n  transferAmount,\n  addAccountsTransaction\n} = accountsSlice.actions;\nexport default accountsSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","ac1","name","type","startingBalance","currentBalance","transactionIds","ac2","accountsSlice","reducers","addAccount","state","action","id","payload","isNaN","console","error","editAccount","transferAmount","fromAccountId","toAccountId","amount","Error","fromAccount","toAccount","addAccountsTransaction","transaction","toLowerCase","push","actions","reducer"],"sources":["/Users/patrickvicente/Documents/projects/frug-financial-tracker/src/redux/slices/accountsSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    ac1: {\n        name: \"spending\",\n        type: \"spending\", // spending, savings, investment, credit, loan\n        startingBalance: 0,\n        currentBalance: 0,\n        transactionIds: [],\n    },\n    ac2: {\n        name: \"NAB\",\n        type: \"credit\", // spending, savings, investment, credit, loan\n        startingBalance: 0,\n        currentBalance: 0,\n        transactionIds: [],\n    },\n};\n\nconst accountsSlice = createSlice({\n    name: \"accounts\",\n    initialState,\n    reducers: {\n        addAccount: (state, action) => {\n            const { id, name, type, startingBalance} = action.payload;\n            if (!id || !name || !type || isNaN(startingBalance)) {\n                console.error(\"Invalid account data\");\n                return\n            }\n            state[id] = {\n                name, \n                type, \n                startingBalance, \n                currentBalance: startingBalance, \n                transactionIds: []\n            }\n        },\n        editAccount: (state, action) => {\n            const { id, name, type } = action.payload;\n            // check if the id is valid then update\n            if (!state[id]) {\n                console.error(`Account with ID ${id} does not exist`);\n                return;\n            }\n            state[id].name = name;\n            state[id].type = type;\n        },\n        transferAmount: (state, action) => {\n            const { fromAccountId, toAccountId, amount } = action.payload;\n            if (!state[fromAccountId] || !state[toAccountId]) {\n                 throw new Error(\"Invalid account IDs provided for transfer\");\n            }\n            const fromAccount = state[fromAccountId];\n            const toAccount = state[toAccountId];\n            // Check if the amount is available from the account\n            if (fromAccount.currentBalance < amount && fromAccount.type !== \"credit\" && fromAccount.type !== \"loan\" ) {\n                console.error(\"Insufficient funds for transfer\");\n                return;\n            }\n            fromAccount.currentBalance -= amount;   // deduct amount from the outgoing account\n            toAccount.currentBalance += amount;     // add amount to ongoing account   \n        },\n        addAccountsTransaction: (state, action) => {\n            const { id, transaction } = action.payload;\n            // check if id object exist\n            if (!state[id]) {\n                console.error(`Account with ID ${id} does not exist`);\n                return;\n            }\n            // check if it transaction income or expense\n            if (transaction.type.toLowerCase() === \"expense\") {\n                state[id].currentBalance -= transaction.amount;\n            } else {\n                state[id].currentBalance += transaction.amount;\n            }\n            state[id].transactionIds.push(transaction.id);\n            \n        },\n    }\n});\n\nexport const { addAccount, editAccount, transferAmount, addAccountsTransaction } = accountsSlice.actions;\nexport default accountsSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}