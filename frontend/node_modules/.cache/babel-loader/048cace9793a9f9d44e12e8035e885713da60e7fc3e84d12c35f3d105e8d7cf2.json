{"ast":null,"code":"// Select all Transactions\nexport const selectAllTransactions = state => {\n  const {\n    byId,\n    allIds\n  } = state.transactions;\n  console.log('Transactions State:', state);\n  if (!state || typeof state !== 'object') {\n    console.error('transactionsState is not an object');\n    return [];\n  }\n  ;\n\n  // Log specific properties\n  console.log('byId:', byId);\n  console.log('allIds:', allIds);\n  if (!allIds || !Array.isArray(allIds)) {\n    console.error('allIds is not an array or is undefined');\n    return [];\n  }\n  return allIds.map(id => byId[id]);\n};\nexport const selectTransactionsByMonth = (state, month, year) => {\n  return Object.values(selectAllTransactions(state)).filter(transaction => {\n    const transactionDate = new Date(transaction.date);\n    return transactionDate.getMonth() === month && transactionDate.getFullYear() === year;\n  });\n};\n\n// Select a transaction by id\n\n//  Select Transactions by type\n// selectors.js\n\nexport const selectTransactionsByType = (state, type) => {\n  if (!state || !state.transactions || !state.transactions.byId) {\n    return [];\n  }\n  return Object.values(state.transactions.byId).filter(transaction => transaction.type === type);\n};\nexport const selectAllTotals = state => {\n  // Checks if the state is not empty\n  if (!state || !state.transactions) return {};\n  const totals = {\n    income: 0,\n    expenses: 0\n  }; // Init empty totals Object\n\n  // Maps through all the IDs and updates the totals object\n  state.transactions.allIds.map(id => {\n    const transaction = state.transactions.byId[id];\n    if (transaction.type.toLowerCase() === \"income\") {\n      totals.income += transaction.amount;\n    } else {\n      totals.expenses += transaction.amount;\n    }\n  });\n  totals.balance = totals.income - totals.expenses;\n  return totals;\n};\nexport const selectTotalsByMonth = state => {\n  // Checks if the state is not empty\n  if (!state || !state.transactions) return {};\n  const transactions = state.transactions.byId;\n  const totals = {}; // Init totals Object\n  // Maps through the transactions\n  Object.values(transactions).forEach(transaction => {\n    const monthYear = new Date(transaction.date).toLocaleString(\"default\", {\n      month: \"short\",\n      year: \"numeric\"\n    });\n    // Creates a new monthYear key, value if not yet present\n    if (!totals[monthYear]) {\n      totals[monthYear] = {\n        income: 0,\n        expenses: 0,\n        balance: 0\n      };\n    }\n    // updates the totals based on type\n    if (transaction.type === \"income\") {\n      totals[monthYear].income += transaction.amount;\n    } else {\n      totals[monthYear].expenses += transaction.amount;\n    }\n    // deducts expenses from income in totals\n    totals[monthYear].balance = totals[monthYear].income - totals[monthYear].expenses;\n  });\n  return totals;\n};","map":{"version":3,"names":["selectAllTransactions","state","byId","allIds","transactions","console","log","error","Array","isArray","map","id","selectTransactionsByMonth","month","year","Object","values","filter","transaction","transactionDate","Date","date","getMonth","getFullYear","selectTransactionsByType","type","selectAllTotals","totals","income","expenses","toLowerCase","amount","balance","selectTotalsByMonth","forEach","monthYear","toLocaleString"],"sources":["/Users/patrickvicente/Documents/projects/frug-financial-tracker/src/redux/selectors/transactionsSelectors.js"],"sourcesContent":["// Select all Transactions\nexport const selectAllTransactions = (state) => {\n    const { byId, allIds } = state.transactions;\n    console.log('Transactions State:', state);\n\n    if (!state || typeof state !== 'object') {\n        console.error('transactionsState is not an object');\n        return [];\n      };\n\n    \n    \n      // Log specific properties\n    console.log('byId:', byId);\n    console.log('allIds:', allIds);\n\n    if (!allIds || !Array.isArray(allIds)) {\n    console.error('allIds is not an array or is undefined');\n    return [];\n    }\n\n    return allIds.map(id => byId[id]);\n};\n\nexport const selectTransactionsByMonth = (state, month, year) => {\n    return Object.values(selectAllTransactions(state)).filter(transaction => {\n        const transactionDate = new Date(transaction.date);\n        return transactionDate.getMonth() === month && transactionDate.getFullYear() === year;\n    });\n};\n\n// Select a transaction by id\n\n//  Select Transactions by type\n// selectors.js\n\nexport const selectTransactionsByType = (state, type) => {\n    if (!state || !state.transactions || !state.transactions.byId) {\n        return [];\n    }\n    return Object.values(state.transactions.byId).filter(transaction => transaction.type === type);\n};\n\nexport const selectAllTotals = (state) => {\n    // Checks if the state is not empty\n    if (!state || !state.transactions) return {};\n\n    const totals = {income: 0, expenses: 0} // Init empty totals Object\n    \n    // Maps through all the IDs and updates the totals object\n    state.transactions.allIds.map((id) => {\n        const transaction = state.transactions.byId[id];\n        if (transaction.type.toLowerCase() === \"income\") {\n            totals.income += transaction.amount;\n        } else {\n            totals.expenses += transaction.amount;\n        }\n    });\n    totals.balance = totals.income - totals.expenses;\n    return totals;\n};\n\nexport const selectTotalsByMonth = (state) => {\n    // Checks if the state is not empty\n    if (!state || !state.transactions) return {};\n    \n    const transactions = state.transactions.byId;\n    const totals = {}; // Init totals Object\n    // Maps through the transactions\n    Object.values(transactions).forEach((transaction) => {\n        const monthYear = new Date(transaction.date).toLocaleString(\"default\", {month: \"short\", year: \"numeric\"});\n        // Creates a new monthYear key, value if not yet present\n        if (!totals[monthYear]) {\n            totals[monthYear] = {income: 0, expenses: 0, balance: 0};\n        }\n        // updates the totals based on type\n        if (transaction.type === \"income\") {\n            totals[monthYear].income += transaction.amount;\n        } else {\n            totals[monthYear].expenses += transaction.amount;\n        }\n        // deducts expenses from income in totals\n        totals[monthYear].balance = totals[monthYear].income - totals[monthYear].expenses\n    });\n\n    return totals;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}